# =============================================================================
# 雪花算法分布式配置文件
# 用途: 确保多台机器生成的ID绝对不重复
# =============================================================================

# === 核心配置 (数据中心+机器ID组合方式) ===
# 这种方式适合规模化部署，支持4个数据中心，每个数据中心64台机器

# 数据中心ID (0-3, 占用Worker ID的高2位)
# 例如: 东部=0, 西部=1, 北部=2, 南部=3
datacenter_id = 1

# 机器ID (0-63, 占用Worker ID的低6位)  
# 例如: 第1台机器=1, 第2台机器=2, 依此类推
machine_id = 5

# 最终Worker ID计算公式: (datacenter_id << 6) | machine_id
# 示例: datacenter_id=1, machine_id=5 → Worker ID = (1 << 6) | 5 = 64 + 5 = 69


# === 算法参数 (一般不需要修改) ===
# Worker ID位数 (8位支持256个不同的Worker ID: 0-255)
worker_id_bits = 8

# 序列号位数 (12位支持每毫秒生成4096个ID)
sequence_bits = 12

# 时钟回拨容忍度 (毫秒)
# 如果系统时钟往回调整在这个范围内，程序会等待而不是报错
max_backward_ms = 10


# === 性能优化配置 ===
# 注意：现在只使用全局锁模式，所有线程共享一个ID生成器
# 这种方式更简单安全，在实际应用中性能表现更好

# 快速IP获取模式 (优化启动速度)
# true = 使用UDP快速获取本机IP，启动更快
# false = 使用TCP连接获取IP，更稳定但慢一些
fast_ip_mode = true


# =============================================================================
# 使用优先级说明 (从高到低):
# 1. 环境变量: export SNOWFLAKE_WORKER_ID=50
# 2. 数据中心+机器ID: datacenter_id + machine_id 组合计算
# 3. IP段自动分配: 根据本机IP地址自动计算Worker ID
# 4. 主机名哈希: 根据主机名SHA256哈希生成Worker ID (最后备选)
# =============================================================================

# =============================================================================
# 部署示例:
# 
# 环境变量部署:
#   export SNOWFLAKE_WORKER_ID=50  # 直接指定Worker ID 50
#   ./myapp
#
# 数据中心部署:
#   # 东部数据中心 (datacenter_id=0): Worker ID 0-63
#   # 西部数据中心 (datacenter_id=1): Worker ID 64-127  
#   # 北部数据中心 (datacenter_id=2): Worker ID 128-191
#   # 南部数据中心 (datacenter_id=3): Worker ID 192-255
#
# Docker部署:
#   docker run -e SNOWFLAKE_WORKER_ID=10 myapp
#   docker run -e SNOWFLAKE_WORKER_ID=11 myapp
#
# Kubernetes部署:
#   env:
#     - name: SNOWFLAKE_WORKER_ID
#       value: "10"
# =============================================================================